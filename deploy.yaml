---
- hosts: localhost
  become: no
  gather_facts: no
  tasks:
  - name: Create a network
    os_network:
      name: "{{ server_name }}"
  - name: Create a subnet without DNS forwarders
    os_subnet:
      name: "{{ server_name }}"
      network_name: "{{ server_name }}"
      cidr: 192.168.23.0/24
    when: (dns_forwarders is not defined) or (not dns_forwarders)
  - name: Create a subnet with DNS forwarders
    os_subnet:
      name: "{{ server_name }}"
      network_name: "{{ server_name }}"
      dns_nameservers: "{{ dns_forwarders }}"
      cidr: 192.168.23.0/24
    when: (dns_forwarders is defined) and dns_forwarders
  - name: Create the router
    os_router:
      name: "{{ server_name }}"
      network: "{{ external_network }}"
      interfaces:
      - "{{ server_name }}"
  - name: Create a security group
    os_security_group:
      name: "{{ server_name }}"
      description: Security group for the DNS server
  - name: Allow pinging the server
    os_security_group_rule:
      security_group: "{{ server_name }}"
      protocol: icmp
      port_range_min: -1
      port_range_max: -1
  - name: Allow SSH access
    os_security_group_rule:
      security_group: "{{ server_name }}"
      protocol: tcp
      port_range_min: 22
      port_range_max: 22
  - name: Allow DNS traffic
    os_security_group_rule:
      security_group: "{{ server_name }}"
      protocol: udp
      port_range_min: 53
      port_range_max: 53
  - name: Create a server
    os_server:
      name: "{{ server_name }}"
      network: "{{ server_name }}"
      auto_ip: yes
      flavor: "{{ flavor }}"
      image: "{{ image }}"
      key_name: "{{ key_name }}"
      security_groups:
      - "{{ server_name }}"
    register: dns_server

  - name: Add the server to the internal inventory
    add_host:
      name: "{{ dns_server.openstack.accessIPv4 }}"
      groups: dns

- hosts: dns
  become: yes
  gather_facts: no
  pre_tasks:
  - name: Wait for the the nodes to come up
    wait_for_connection:
  - name: Gather facts for the new nodes
    setup:
  - name: Verify the server can access the internet
    command: ping -c 1 google.com
    when: (dns_forwarders is not defined) or (not dns_forwarders)
  - name: Read nameservers from /etc/resolv.conf
    command: "awk '/^nameserver/ { print $2; }' /etc/resolv.conf"
    register: resolv_conf
    when: (dns_forwarders is not defined) or (not dns_forwarders)
  - set_fact:
      final_dns_forwarders: "{{ resolv_conf.stdout_lines }}"
    when: "'stdout_lines' in resolv_conf"
  - set_fact:
      final_dns_forwarders: "{{ dns_forwarders }}"
    when: "'stdout_lines' not in resolv_conf"
  - task: Print the DNS forwarders we will use
    debug: var=final_dns_forwarders

  roles:
  - role: infra-ansible/roles/config-dns-server
    print_dns_keys: True
    named_config_recursion: 'yes'
    named_config_views:
    - name: "public"
      recursion: 'yes'
      # TODO(shadower): this seems to break recursion! Figure it out
      #acl_entry: "{{ allowed_cidr }}"
      zone:
      - dns_domain: "{{ dns_domain }}"
      default_forwarders: "{{ final_dns_forwarders }}"
